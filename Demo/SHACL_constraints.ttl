@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix or:    <http://www.semanticweb.org/Twin_OR/> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .

# Makes sure the surfaces are not dirty
or:SurfaceCleanShape
    a sh:NodeShape ;
    sh:targetClass or:Surface ;  # Applies to all instances of Surface
    sh:property [              
        sh:path or:clean ;
        sh:not [        
        sh:hasValue "false"^^xsd:boolean ; # alerts if not clean
	];
    ] .

# Alerts if a surface is not flat
or:SurfaceCleanShape
    a sh:NodeShape ;
    sh:targetClass or:Surface ;  # Applies to all instances of Surface
    sh:property [              
        sh:path or:flat ;
        sh:not [        
        sh:hasValue "false"^^xsd:boolean ; # alerts if not flat
	];
    ] .

# Makes sure the four-pinned LEGO block is used in a specific step (during picking up)
or:FourPinLegoShape
    a sh:NodeShape ;
    sh:targetNode or:Step_A2_2 ;
    sh:property [
        sh:path or:materialUsed ;
        sh:class or:RectangularLegoBlock ;
    ] .

# For a specific step, put the block in the correct position ("nearest" position)
or:LegoInCorrectPositionShape
    a sh:NodeShape ;
    sh:targetNode or:Step_A2_3 ;
    sh:property [
        sh:path or:blockPosition ;
        sh:hasValue or:Nearest_Pos ;
    ] .

# Alert if alignment of the pins is incorrect
or:CorrectAlignmentShape
    a sh:NodeShape ;
    sh:targetNode or:Step_A5_1 ;
    sh:property [              
        sh:path or:correctAlignment ;
        sh:not [        
        sh:hasValue "false"^^xsd:boolean ; # alerts incorrect alignment
	];
    ] .

# Forceps present in the tool gathering phase
or:ToolShape
    a sh:NodeShape ;
    sh:targetNode or:Step_A1_2 ;
    sh:property [
        sh:path or:toolUsed ;
        sh:hasValue or:Forceps ;
    ] .

# Makes sure some actor present has the required capability
or:StepShape
    a sh:NodeShape ;
    sh:targetClass or:Step ;
    sh:sparql [        sh:message "There must be at least one Actor assigned to the Step with the required Capability." ;        sh:select """
            PREFIX or: <http://www.semanticweb.org/Twin_OR/>
            SELECT ?this WHERE {
                ?this or:requiresCapability ?requiredCapability .
                FILTER NOT EXISTS {
                    ?this or:actor ?actor .
                    ?actor or:hasCapability ?requiredCapability .
                }
            }
        """ ;    ] .

# Alerts if a step fails
or:StepFailureShape
    a sh:NodeShape ;
    sh:targetClass or:Step ;  # Applies to all instances of Step
    sh:property [              
        sh:path or:stepFailure ;
        sh:not [        
        sh:hasValue "true"^^xsd:boolean ;
	];
    ] .